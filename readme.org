- nodejs
 - отвечает за api
   всё апи состоит из простых методов вроде getProfile getMenu, возвращающих json. Но все эти методы чтобы можно было использовать по одиночке или же вызывать
   как функции из одного метода. То есть чтобы например можно было сделать метод getMain стартовый, который бы возвращал объект { profile : {}, menu : {})
   Соответственно те методы бы возращали { profile : {} } и { menu :{}}
   То есть получается что также как сейчас в php у нас, один или два запроса и полное обновление страницы. А данные приходящие обрабатывать черед один диспетчер.
 - раздачу статики
 - может быть gulp но только для сборки css в один файл, html в один файл и js в один файл

- шаблоны
  чистый html, никаких клиентских шаблонов, возможно jade или ejs только для тех целей, которых они используются в связке с angular - чтобы делать include,
  общие блоки включать там или тут и тд.
  Никакого страдиционного понимания шаблонов. Есть например sidebar.jade В нём разметка html. Но за меню отвечает обычный javascript объект, находящийся в
  sidebar.js, которым управляют чисто из js по типу - sidebar.update({ menu : {}});
  сам объект и является шаблонизатором, то есть работает с dom напрямую используя тот же jquery, когда ему надо что-нибудь куда-нибудь добавить

- код
  весь клиентский код это просто набор объектов javascript, которые один встраиваются в другой. То есть как компоненты. Допустим Page это родитель, а sidebar это его потомок. Набор простейших методов у каждого объекта для встраивания и обновления. Никаких сервисов, сложной архитектуры и тд. Каждому объекту по файлу, если объект совсем маленький, то в один файл много объектов.
  Когда страница загружается там есть фунция main с содержимым вроде такого:
  var page = new Page();
  var sidebar = new Sidebar(page);
  var content = new Content(page);
